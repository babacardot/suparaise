name: Reset Subscription Limits

on:
  schedule:
    # Runs at 02:00 UTC every day (different time from cleanup job to spread load)
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allows manual triggering for testing
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no actual resets)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  reset-limits:
    runs-on: ubuntu-latest
    steps:
      - name: Check secret availability
        run: |
          if [ -n "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
            echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is available"
          else
            echo "‚ùå SUPABASE_SERVICE_ROLE_KEY is NOT available"
            exit 1
          fi

      - name: Reset subscription limits
        run: |
          echo "üîÑ Starting subscription limits reset..."

          # Call the Edge Function (matching pattern of other workflows)
          RESPONSE=$(curl -s -X POST "https://swhlekigmfdbwulrncot.supabase.co/functions/v1/reset-subscription-limits" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json")

          echo "üìä Reset Response: $RESPONSE"

          # Check if the response indicates success
          if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "‚úÖ Subscription limits reset completed successfully"
            
            # Extract and display statistics from the new response format
            TOTAL_AFFECTED=$(echo "$RESPONSE" | grep -o '"total_affected":[0-9]*' | cut -d':' -f2)
            FREE_AFFECTED=$(echo "$RESPONSE" | grep -o '"free_users_affected":[0-9]*' | cut -d':' -f2)
            PAID_AFFECTED=$(echo "$RESPONSE" | grep -o '"paid_users_affected":[0-9]*' | cut -d':' -f2)
            
            echo "üìà Statistics:"
            echo "   - Total users reset: ${TOTAL_AFFECTED:-0}"
            echo "   - Free users reset: ${FREE_AFFECTED:-0}" 
            echo "   - Paid users reset: ${PAID_AFFECTED:-0}"
            
            # Display usage summary if available
            if echo "$RESPONSE" | grep -q '"usage_summary"'; then
              echo "üìä Current Usage Summary:"
              echo "$RESPONSE" | jq -r '.usage_summary[]? | "   - \(.permission_level): \(.user_count) users, \(.users_at_limit) at limit, \(.subscribed_users) subscribed"' 2>/dev/null || echo "   (Usage summary available in response)"
            fi
          else
            echo "‚ùå Subscription limits reset failed"
            echo "Response: $RESPONSE"
            exit 1
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "üö® Subscription reset job failed! Check the logs above for details."
          # In a real setup, you might want to send notifications to Slack, email, etc.
